import RPi.GPIO as GPIO
import time
import glob

# BCM-Nummerierung aktivieren
GPIO.setmode(GPIO.BCM)

# 7-Segment-Pins für die Segmente A-G und DP
segments = {
    'A': 5, 'B': 21, 'C': 16, 'D': 20, 'E': 12, 'F': 26, 'G': 19, 'DP': 6
}
for segment in segments.values():
    GPIO.setup(segment, GPIO.OUT)
    GPIO.output(segment, 0)

# Digit-Pins (Multiplexing)
digits = [22, 27, 17, 23]  # DIG0, DIG1, DIG2, DIG3
for digit in digits:
    GPIO.setup(digit, GPIO.OUT)
    GPIO.output(digit, 1)  # Startet ausgeschaltet

# Zahlen als Segment-Matrix
num = {
    '0': (1, 1, 1, 1, 1, 1, 0),
    '1': (0, 1, 1, 0, 0, 0, 0),
    '2': (1, 1, 0, 1, 1, 0, 1),
    '3': (1, 1, 1, 1, 0, 0, 1),
    '4': (0, 1, 1, 0, 0, 1, 1),
    '5': (1, 0, 1, 1, 0, 1, 1),
    '6': (1, 0, 1, 1, 1, 1, 1),
    '7': (1, 1, 1, 0, 0, 0, 0),
    '8': (1, 1, 1, 1, 1, 1, 1),
    '9': (1, 1, 1, 1, 0, 1, 1),
    'C': (1, 0, 0, 1, 1, 1, 0)  # 'C' für Celsius
}

# 1-Wire Initialisierung (DS18B20)
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]  # Falls Fehler: Kein Sensor erkannt
device_file = device_folder + '/w1_slave'

def read_temp():
    """Liest die Temperatur aus dem DS18B20-Sensor."""
    with open(device_file, 'r') as f:
        lines = f.readlines()
    
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        with open(device_file, 'r') as f:
            lines = f.readlines()
    
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = round(float(temp_string) / 1000.0)  # Temperatur auf ganze Zahl runden
        return temp_c

def display_number(value):
    """Zeigt die Temperatur als XX°C auf der SH5461AS an."""
    value = str(value)  # In String umwandeln
    if len(value) == 1:
        value = ' ' + value  # Falls einstellig, linksbündig auffüllen
    
    value += 'C'  # Temperaturwert mit 'C' anzeigen
    
    for digit in range(4):  # Multiplexing der 4 Stellen
        for seg, pin in zip(num[value[digit]], segments.values()):
            GPIO.output(pin, seg)
        
        GPIO.output(digits[digit], 0)  # Digit aktivieren
        time.sleep(0.005)  # Kurze Anzeigedauer (Multiplexing)
        GPIO.output(digits[digit], 1)  # Digit deaktivieren

try:
    while True:
        temperature = read_temp()
        print(f"Temperatur: {temperature}°C")
        for _ in range(100):  # Wiederholt die Anzeige für Stabilität
            display_number(temperature)
finally:
    GPIO.cleanup()  # GPIOs beim Beenden zurücksetzen
